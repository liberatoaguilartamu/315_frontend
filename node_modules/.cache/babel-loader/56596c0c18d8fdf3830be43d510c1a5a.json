{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Clock import\nimport moment from 'moment';\nimport VueClock from '@dangvanthanh/vue-clock';\nimport { getItems, getLatestOrderId } from '../js/backend.js';\nimport { getLatestToppingUUID } from '../js/backend.js';\nimport { getLatestItemUUID } from '../js/backend.js';\nimport { insertOrder } from '../js/backend.js';\nimport { insertOrderItems } from '../js/backend.js';\nimport { insertOrderToppings } from '../js/backend.js';\nimport { getIdFromName } from '../js/backend.js';\nimport { incrementInventory } from '../js/backend.js';\nimport { getItemsFromCategory } from '../js/backend.js';\nimport { getToppings } from '../js/backend.js';\nimport { loadGoogle, userSignedIn } from '../js/login.js';\nexport default {\n  data: () => ({\n    dialog: false,\n    dialogDelete: false,\n    count: -1,\n    enable_toppings: false,\n    enable_entrees: true,\n    enalbe_mainProteins: false,\n    enable_subProteins: false,\n    tip: 0,\n    sub_total: 0,\n    total: 0,\n    calories_total: 0,\n    tip1: false,\n    tip2: false,\n    tip3: false,\n    tip4: false,\n    light_mode: false,\n    dark_mode: true,\n    current_time: moment(new Date()).utc().format('YYYY-DD-MM hh:mm:ss'),\n    latestOrderID: 0,\n    latestToppingUUID: 0,\n    latestItemUUID: 0,\n    // Layout\n    justify: ['space-between'],\n    // Table\n    headers: [{\n      text: 'Item Number',\n      align: 'start',\n      sortable: false,\n      value: 'number'\n    }, {\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Price',\n      value: 'price'\n    }, {\n      text: 'Actions',\n      value: 'actions',\n      sortable: false\n    }],\n    items: [],\n    entrees_array: [],\n    toppings_array: [],\n    editedIndex: -1,\n    editedItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n    defaultItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n    mainEntrees_all: [],\n    mainEntrees_name: [],\n    subEntrees_name: [],\n    subEntrees_all: [],\n    mainProteins_name: [],\n    mainProteins_all: [],\n    subProteins_name: [],\n    subProteins_all: [],\n    toppings_name: [],\n    toppings_all: [],\n    signedIn: false\n  }),\n  // data end\n\n  // computed\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? 'New Item' : 'Edit Item';\n    },\n    calculate_subTotal() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.sub_total_track = sum;\n      return this.sub_total = sum;\n    },\n    isDisabled() {\n      return this.enable_toppings;\n    },\n    isDisabled_mainProteins() {\n      return this.enalbe_mainProteins;\n    },\n    isDisabled_subProteins() {\n      return this.enable_subProteins;\n    },\n    isDisabled_entrees() {\n      return this.enable_entrees;\n    },\n    istip1() {\n      return this.tip1;\n    },\n    istip2() {\n      return this.tip2;\n    },\n    istip3() {\n      return this.tip3;\n    },\n    istip4() {\n      return this.tip4;\n    },\n    isdarkMode() {\n      return this.dark_mode;\n    },\n    isLightMode() {\n      return this.light_mode;\n    },\n    calculate_tip_1() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.05;\n      return this.tip;\n    },\n    calculate_tip_2() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.10;\n      return this.tip;\n    },\n    calculate_tip_3() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.15;\n      return this.tip;\n    },\n    calculate_tip_4() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.20;\n      return this.tip;\n    },\n    calculate_total() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.total = (sum + this.tip).toFixed(2);\n      return (sum + this.tip).toFixed(2);\n    },\n    calculate_total_calories() {\n      return this.calories_total;\n    },\n    ee() {}\n  },\n  // watch\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    }\n  },\n  // Clock\n  components: {\n    VueClock\n  },\n  // methods\n  methods: {\n    // Entrees buttons\n    click_entrees(e) {\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (e === this.mainEntrees_all[i].name) {\n          this.count++;\n          this.calories_total += this.mainEntrees_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.mainEntrees_all[i].name,\n            price: this.mainEntrees_all[i].price\n          });\n        }\n      }\n      this.entrees_array.push({\n        number: this.count,\n        name: e\n      });\n    },\n    // Proteins buttons\n    click_proteins: function (e) {\n      for (let i = 0; i < this.mainProteins_all.length; i++) {\n        if (e === this.mainProteins_all[i].name) {\n          this.calories_total += this.mainProteins_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.mainProteins_all[i].name,\n            price: this.mainProteins_all[i].price\n          });\n        }\n      }\n      this.toppings_array.push({\n        number: this.count,\n        name: e\n      });\n    },\n    // Toppings buttons\n    click_toppings: function (e) {\n      for (let i = 0; i < this.toppings_all.length; i++) {\n        if (e === this.toppings_all[i].name) {\n          this.calories_total += this.toppings_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.toppings_all[i].name,\n            price: this.toppings_all[i].price\n          });\n        }\n      }\n      this.toppings_array.push({\n        number: this.count,\n        name: e\n      });\n    },\n    tip_control(k) {\n      if (k === 1) {\n        this.tip1 = true;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = false;\n      } else if (k === 2) {\n        this.tip1 = false;\n        this.tip2 = true;\n        this.tip3 = false;\n        this.tip4 = false;\n      } else if (k === 3) {\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = true;\n        this.tip4 = false;\n      } else if (k === 4) {\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = true;\n      }\n    },\n    async enable_all_buttons(k) {\n      let array = await getItemsFromCategory('mainEntree');\n      for (let i = 0; i < array.length; i++) {\n        if (k === array[i].name) {\n          this.enable_toppings = true;\n          this.enalbe_mainProteins = true;\n          this.enable_subProteins = false;\n        }\n      }\n    },\n    enable_entree_buttons(k) {\n      this.enable_entrees = false;\n      if (k === 1) {\n        this.enable_entrees = true;\n      }\n    },\n    disable_mainProteins_buttons(k) {\n      this.enalbe_mainProteins = false;\n    },\n    enable_subProteins_buttons() {\n      this.enable_subProteins = true;\n    },\n    disable_subProteins_buttons() {\n      this.enable_subProteins = false;\n    },\n    addItem() {\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      let empty_array = [{\n        number: '',\n        name: '',\n        price: 0\n      }];\n      this.items.push({\n        number: '',\n        name: '',\n        price: 0\n      });\n    },\n    async deleteItem(item) {\n      this.editedIndex = this.items.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n      this.items.splice(this.editedIndex, 1);\n      this.closeDelete();\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (item.name === this.mainEntrees_all[i].name) {\n          this.count -= 1;\n          this.enable_entrees = true;\n          this.enalbe_mainProteins = false;\n          this.enable_subProteins = false;\n          this.enable_toppings = false;\n          this.entrees_array.pop(this.entrees_array.length - 1);\n        }\n      }\n      let array = await getItemsFromCategory('mainProtein');\n      for (let j = 0; j < array.length; j++) {\n        if (item.name === array[j].name) {\n          this.enalbe_mainProteins = true;\n          this.enable_subProteins = false;\n        }\n      }\n      for (let m = 0; m < this.subProteins_all.length; m++) {\n        if (item.name === this.subProteins_all[m].name) {\n          this.enable_subProteins = true;\n        }\n      }\n      let array2 = await getItemsFromCategory('mainProtein');\n      for (let p = 0; p < this.subProteins_all.length; p++) {\n        array2.push(this.subProteins_all[p]);\n      }\n      for (let o = 0; o < this.toppings_all.length; o++) {\n        array2.push(this.toppings_all[o]);\n      }\n      for (let l = 0; l < array2.length; l++) {\n        if (item.name === array2[l].name) {\n          this.toppings_array.pop(this.toppings_array.length - 1);\n        }\n      }\n      let array3 = await getItems();\n      for (let u = 0; u < array2.length; u++) {\n        array3.push(array2[u]);\n      }\n      for (let y = 0; y < array3.length; y++) {\n        if (item.name === array3[y].name) {\n          this.calories_total -= array3[y].calories;\n        }\n      }\n    },\n    deleteAllItem(e) {\n      if (e == 'clear') {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i);\n        }\n        this.entrees_array = [];\n        this.toppings_array = [];\n        this.count = -1;\n        this.enalbe_mainProteins = false;\n        this.enable_subProteins = false;\n        this.enable_toppings = false;\n        this.enable_entrees = true;\n        this.tip = 0;\n        this.total = 0;\n        this.sub_total = 0;\n        this.calories_total = 0;\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = false;\n        alert(\"Cleared!\");\n      } else {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i);\n        }\n      }\n    },\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n    getData(data) {\n      alert(data);\n    },\n    light_mode_button() {\n      this.$vuetify.theme.dark = false;\n      this.dark_mode = false;\n    },\n    light_mode_button_outlined() {\n      this.$vuetify.theme.dark = false;\n      this.light_mode = true;\n      this.dark_mode = false;\n    },\n    dark_mode_button() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n    },\n    dark_mode_button_outlined() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n      this.dark_mode = true;\n    },\n    async getOrderID() {\n      this.latestOrderID = await getLatestOrderId();\n    },\n    async getToppingUUID() {\n      this.latestToppingUUID = await getLatestToppingUUID();\n    },\n    async getItemUUID() {\n      this.latestItemUUID = await getLatestItemUUID();\n    },\n    async updateItems() {\n      let a = await getItemsFromCategory(\"mainEntree\");\n      this.mainEntrees_name.splice(0);\n      for (let i = 0; i < a.length; i++) {\n        if (a[i].name != null) {\n          this.mainEntrees_name.push(a[i].name);\n        }\n      }\n      let b = await getItemsFromCategory(\"subEntree\");\n      this.subEntrees_name.splice(0);\n      for (let j = 0; j < b.length; j++) {\n        if (b[j].name != null) {\n          this.subEntrees_name.push(b[j].name);\n        }\n      }\n      let c = await getItemsFromCategory(\"mainProtein\");\n      this.mainProteins_name.splice(0);\n      for (let n = 0; n < c.length; n++) {\n        if (c[n].name != null) {\n          this.mainProteins_name.push(c[n].name);\n        }\n      }\n      let d = await getItemsFromCategory(\"subProtein\");\n      this.subProteins_name.splice(0);\n      for (let m = 0; m < d.length; m++) {\n        if (d[m].name != null) {\n          this.subProteins_name.push(d[m].name);\n        }\n      }\n      let e = await getItemsFromCategory(\"topping\");\n      this.toppings_name.splice(0);\n      for (let u = 0; u < e.length; u++) {\n        if (e[u].name != null) {\n          this.toppings_name.push(e[u].name);\n        }\n      }\n    },\n    async insertOrderTable() {\n      await insertOrder(this.latestOrderID + 1, this.calories_total, this.sub_total, this.tip, this.total, this.current_time);\n      let c = 1;\n      if (this.entrees_array != []) {\n        for (let i = 0; i < this.entrees_array.length; i++) {\n          let id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await insertOrderItems(this.latestItemUUID + c, this.latestOrderID + 1, this.entrees_array[i].number, id_entrees, this.entrees_array[i].name);\n          let inventroy_id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await incrementInventory(inventroy_id_entrees);\n          c += 1;\n        }\n      }\n      let d = 1;\n      if (this.toppings_array != []) {\n        for (let j = 0; j < this.toppings_array.length; j++) {\n          let id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await insertOrderToppings(this.latestToppingUUID + d, this.latestOrderID + 1, this.toppings_array[j].number, id_toppings, this.toppings_array[j].name);\n          let inventory_id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await incrementInventory(inventory_id_toppings);\n          d += 1;\n        }\n      }\n      this.entrees_array = [];\n      this.toppings_array = [];\n      this.count = -1;\n      this.latestOrderID = await getLatestOrderId();\n      this.latestItemUUID = await getLatestItemUUID();\n      this.latestToppingUUID = await getLatestToppingUUID();\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.tip = 0;\n      this.total = 0;\n      this.sub_total = 0;\n      this.calories_total = 0;\n      this.tip1 = false;\n      this.tip2 = false;\n      this.tip3 = false;\n      this.tip4 = false;\n    },\n    async getItemInfo() {\n      this.mainEntrees_all = await getItems();\n      this.mainProteins_all = await getItemsFromCategory('mainProtein');\n      this.subProteins_all = await getItemsFromCategory('subProtein');\n      for (let i = 0; i < this.subProteins_all.length; i++) {\n        this.mainProteins_all.push(this.subProteins_all[i]);\n      }\n      this.toppings_all = await getItemsFromCategory('topping');\n    }\n  },\n  async created() {\n    this.signedIn = await loadGoogle();\n    console.log(this.signedIn);\n    await userSignedIn(this.$route.params.credential);\n    await this.updateItems();\n    await this.getItemInfo();\n  },\n  async mounted() {\n    await this.getOrderID();\n    await this.getToppingUUID();\n    await this.getItemUUID();\n    await this.getIdFromName();\n  }\n};","map":{"version":3,"mappings":";AAoTA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IAEAC;IACAC;IACAC;IAEA;IACAC,UACA,gBACA;IAEA;IACAC,UACA;MACAC;MACAC;MACAC;MACAC;IACA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;MAAAD;IAAA,EACA;IAEAE;IAEAC;IAEAC;IAEAC;IAEAC;MACAC;MACAC;MACAC;IACA;IAEAC;MACAH;MACAC;MACAC;IACA;IAEAE;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EAEA;EAAA;;EAEA;EACAC;IAEAC;MACA;IACA;IAEAC;MACA;MACA;QACAC;MACA;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;QACAX;MACA;MACA;MACA;IACA;IAEAY;MACA;MACA;QACAZ;MACA;MACA;MACA;IACA;IAEAa;MACA;MACA;QACAb;MACA;MACA;MACA;IACA;IAEAc;MACA;MACA;QACAd;MACA;MACA;MACA;IACA;IAEAe;MACA;MACA;QACAf;MACA;MACA;MACA;IACA;IAEAgB;MACA;IACA;IAEAC,MAEA;EAKA;EAEA;EACAC;IACApE;MACAqE;IACA;IACApE;MACAoE;IACA;EACA;EAEA;EACAC;IAAAC;EAAA;EAEA;EACAC;IACA;IACAC;MACA;QACA;UACA;UACA;UACA;YACAzC;YACAC;YACAC;UACA;QACA;MACA;MACA;QACAF;QACAC;MACA;IACA;IAEA;IACAyC;MACA;QACA;UACA;UACA;YACA1C;YACAC;YACAC;UACA;QACA;MACA;MACA;QACAF;QACAC;MACA;IACA;IAEA;IACA0C;MACA;QACA;UACA;UACA;YACA3C;YACAC;YACAC;UACA;QACA;MACA;MACA;QACAF;QACAC;MACA;IACA;IAEA2C;MACA;QACA;QACA;QACA;QACA;MACA,OACA;QACA;QACA;QACA;QACA;MACA,OACA;QACA;QACA;QACA;QACA;MACA,OACA;QACA;QACA;QACA;QACA;MACA;IACA;IAEA;MACA;MACA;QACA;UACA;UACA;UACA;QACA;MACA;IACA;IAEAC;MACA;MAEA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MAEA;QACAjD;QACAC;QACAC;MACA;MACA;QACAF;QACAC;QACAC;MACA;IACA;IAEA;MACA;MACA;MACA;MACA;MACA;MAEA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;MACA;MAEA;MACA;QACA;UACA;UACA;QACA;MACA;MAEA;QACA;UACA;QACA;MACA;MAEA;MACA;QACAgD;MACA;MACA;QACAA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;QACAC;MACA;MACA;QACA;UACA;QACA;MACA;IACA;IAEAC;MACA;QACA;UACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAC;MACA,OACA;QACA;UACA;QACA;MACA;IACA;IAEAC;MACA;MACA;QACA;QACA;MACA;IACA;IAEAC;MACAF;IACA;IAEAG;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;IACA;IAEA;MACA;MAEA;MACA;QACA;UACA;UACA;UACA;UACA;UACAC;QACA;MACA;MAEA;MACA;QACA;UACA;UACA;UACA;UACA;UACAC;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEA;MACA;MACA;MACA;MACA;QACA;MACA;MACA;IACA;EACA;EAEA;IACA;IACAC;IACA;IACA;IACA;EACA;EAEA;IACA;IACA;IACA;IACA;EACA;AAEA","names":["data","dialog","dialogDelete","count","enable_toppings","enable_entrees","enalbe_mainProteins","enable_subProteins","tip","sub_total","total","calories_total","tip1","tip2","tip3","tip4","light_mode","dark_mode","current_time","latestOrderID","latestToppingUUID","latestItemUUID","justify","headers","text","align","sortable","value","items","entrees_array","toppings_array","editedIndex","editedItem","number","name","price","defaultItem","mainEntrees_all","mainEntrees_name","subEntrees_name","subEntrees_all","mainProteins_name","mainProteins_all","subProteins_name","subProteins_all","toppings_name","toppings_all","signedIn","computed","formTitle","calculate_subTotal","sum","isDisabled","isDisabled_mainProteins","isDisabled_subProteins","isDisabled_entrees","istip1","istip2","istip3","istip4","isdarkMode","isLightMode","calculate_tip_1","calculate_tip_2","calculate_tip_3","calculate_tip_4","calculate_total","calculate_total_calories","ee","watch","val","components","VueClock","methods","click_entrees","click_proteins","click_toppings","tip_control","enable_entree_buttons","disable_mainProteins_buttons","enable_subProteins_buttons","disable_subProteins_buttons","addItem","array2","array3","deleteAllItem","alert","closeDelete","getData","light_mode_button","light_mode_button_outlined","dark_mode_button","dark_mode_button_outlined","c","d","console"],"sourceRoot":"src/views","sources":["ServerView.vue"],"sourcesContent":["<!----------Comment+----------->\n\n<!----------Template----------->\n<template>\n  <div v-if=\"signedIn\">\n    <!--Top-->\n    <v-container class=\"Top\">\n      <v-row v-for=\"j in justify\" :key=\"j\" :justify=\"j\">\n        <v-col v-for=\"k in 1\" :key=\"k\">\n          <!--Server button-->\n          <v-btn elevation=\"5\" color=\"warning\">Server View</v-btn>\n\n          <!-- Debugging Part\n          {{ entrees_array }}\n          {{ toppings_array }}\n          {{ calories_total }} -->\n          <!-- {{ subEntrees_name }}\n          {{ mainProteins_name }}\n          {{ subProteins_name }}\n          {{ total }}\n          <br></br>\n          <br></br>\n          {{ sub_total }}\n          <br></br>\n          {{ entrees_array }}\n          <br></br>\n          {{ toppings_array }}\n          {{ latestOrderID }}\n\n          {{ calories_total }} -->\n\n          <!-- {{ current_time}} -->\n\n          <!-- {{calories_total}}\n          {{moment(new Date()).format('YYYY-DD-MM h:mm:ss')}}  -->\n\n          <!--Manager button-->\n          <router-view :key=\"$route.fullPath\"></router-view>\n          <router-link :to=\"{ path: '/manager' }\" style=\"text-decoration: none; color: inherit;\">\n            <v-btn elevation=\"5\" class=\"ma-2\" outlined color=\"orange\">Manager View</v-btn>\n          </router-link>\n        </v-col>\n        <right>\n          <v-col v-for=\"k in 1\" :key=\"k\">\n            <!--ColorBlind mode button-->\n            <v-btn v-if=\"isLightMode\" @click=\"light_mode_button\" elevation=\"5\" class=\"ma-2\" color=\"green\">\n              Light Mode\n            </v-btn>\n            <v-btn v-if=\"!isLightMode\" @click=\"light_mode_button_outlined\" elevation=\"5\" class=\"ma-2\" outlined\n              color=\"green\">\n              Light Mode\n            </v-btn>\n            <v-btn v-if=\"isdarkMode\" @click=\"dark_mode_button\" elevation=\"5\" class=\"ma-2\" color=\"green\">\n              Dark Mode\n            </v-btn>\n            <v-btn v-if=\"!isdarkMode\" @click=\"dark_mode_button_outlined\" elevation=\"5\" class=\"ma-2\" outlined\n              color=\"green\">\n              Dark Mode\n            </v-btn>\n          </v-col>\n        </right>\n      </v-row>\n    </v-container>\n\n    <!--Middle-->\n    <v-container class=\"Mid\">\n      <v-row v-for=\"j in justify\" :key=\"j\" :justify=\"j\">\n        <!--Left side-->\n        <v-col v-for=\"k in 1\" :key=\"k\">\n          <!--Clock-->\n          <vue-clock />\n          <!--Update button-->\n          &nbsp;&nbsp;\n          <v-btn @click=\"updateItems(), getData('Updated!'), deleteAllItem('clear')\" elevation=\"5\" class=\"ma-1\"\n            color=\"green\" dark large>Update\n          </v-btn>\n          &nbsp;&nbsp;\n          <!--Order table-->\n          <br>\n          <v-data-table :headers=\"headers\" :items=\"items\" sort-by=\"\" class=\"elevation-1\">\n            <template v-slot:top>\n              <v-divider class=\"mx-4\" inset vertical></v-divider>\n              <v-spacer></v-spacer>\n            </template>\n\n            <!--Delete button-->\n            <template v-slot:item.actions=\"{ item }\">\n              <v-btn depressed color=\"error\" small @click=\"deleteItem(item)\">\n                DELETE\n              </v-btn>\n            </template>\n          </v-data-table>\n\n          <!--Add, order, clear buttons-->\n          <center>\n            <v-card class=\"pa-2\" inlined tile>\n              <v-btn large elevation=\"5\" rounded color=\"green\" dark class=\"mb-2\"\n                @click=\"addItem(), getData('Add Your Next Item!')\">\n                Add\n              </v-btn>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              <v-btn large elevation=\"5\" rounded\n                @click=\"getData('Order Placed!'), deleteAllItem('order'), insertOrderTable()\" class=\"mb-2\"\n                color=\"orange\" dark>Order\n              </v-btn>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n              <v-btn large elevation=\"5\" rounded color=\"primary\" dark class=\"mb-2\"\n                @click.native=\"deleteAllItem('clear')\">\n                clear\n              </v-btn>\n            </v-card>\n          </center>\n\n          <!--tip buttons-->\n          <center>\n            <br>\n            <v-card class=\"pa-2\" inlined tile>\n              <v-col>\n                <h2>\n                  Tip:\n                  <v-btn v-if=\"dark_mode\" @click=\"tip_control(1)\" elevation=\"8\" class=\"ma-2\" outlined color=\"orange\">5%\n                  </v-btn>\n                  <v-btn v-if=\"light_mode\" @click=\"tip_control(1)\" elevation=\"1\" class=\"ma-2\" depressed color=\"warning\">\n                    5%\n                  </v-btn>\n                  <v-btn v-if=\"dark_mode\" @click=\"tip_control(2)\" elevation=\"8\" class=\"ma-2\" outlined color=\"orange\">10%\n                  </v-btn>\n                  <v-btn v-if=\"light_mode\" @click=\"tip_control(2)\" elevation=\"1\" class=\"ma-2\" depressed color=\"warning\">\n                    10%</v-btn>\n                  <v-btn v-if=\"dark_mode\" @click=\"tip_control(3)\" elevation=\"8\" class=\"ma-2\" outlined color=\"orange\">15%\n                  </v-btn>\n                  <v-btn v-if=\"light_mode\" @click=\"tip_control(3)\" elevation=\"1\" class=\"ma-2\" depressed color=\"warning\">\n                    15%</v-btn>\n                  <v-btn v-if=\"dark_mode\" @click=\"tip_control(4)\" elevation=\"8\" class=\"ma-2\" outlined color=\"orange\">20%\n                  </v-btn>\n                  <v-btn v-if=\"light_mode\" @click=\"tip_control(4)\" elevation=\"1\" class=\"ma-2\" depressed color=\"warning\">\n                    20%</v-btn>\n                  &nbsp;\n                </h2>\n              </v-col>\n            </v-card>\n          </center>\n          <br>\n\n          <!--Subtotal, tip, and total-->\n          <center>\n            <v-card class=\"pa-2\" inlined tile>\n              <v-col>\n                <h2 class=\"font-weight-bold\" @click=\"calculate_subTotal\">\n                  Subtotal: {{ sub_total.toFixed(2) }}\n                </h2>\n                <br>\n                <h2 class=\"font-weight-bold\">\n                  Tip:\n                </h2>\n                <h2 class=\"font-weight-bold\" v-if=\"istip1\">\n                  {{ calculate_tip_1.toFixed(2) }} (5%)\n                </h2>\n                <h2 class=\"font-weight-bold\" v-else-if=\"istip2\">\n                  {{ calculate_tip_2.toFixed(2) }} (10%)\n                </h2>\n                <h2 class=\"font-weight-bold\" v-else-if=\"istip3\">\n                  {{ calculate_tip_3.toFixed(2) }} (15%)\n                </h2>\n                <h2 class=\"font-weight-bold\" v-else-if=\"istip4\">\n                  {{ calculate_tip_4.toFixed(2) }} (20%)\n                </h2>\n                <br>\n                <h2 class=\"font-weight-bold\">\n                  Total: {{ calculate_total }}\n                </h2>\n              </v-col>\n              <br>\n              <!--Pom & honey image-->\n              <v-col>\n                <v-img src=\"./pom.png\" width=\"300\"></v-img>\n              </v-col>\n            </v-card>\n          </center>\n        </v-col>\n\n        <!--Right side-->\n        <v-col v-for=\"k in 1\" :key=\"k\">\n          <!--Entrees / Drinks-->\n          <center>\n            <br><br>\n            <v-row no-gutters>\n              <v-col v-for=\"n in 1\" :key=\"n\" :cols=\"n === 2 ? 5 : undefined\">\n                <v-card class=\"pa-2\" inlined tile>\n                  <h2 class=\"font-weight-bold\">\n                    Entrees / Drinks\n                  </h2>\n                  <!--mainEntrees / subEntrees buttons-->\n                  <div class=\"ma-2\">\n                    <a v-for=\"k in mainEntrees_name\" :key=\"k\">\n                      <v-btn v-if=\"dark_mode\" @click=\"click_entrees(k), enable_all_buttons(k), enable_entree_buttons()\"\n                        :disabled=\"!isDisabled_entrees\" elevation=\"10\" class=\"ma-3\" outlined color=\"orange\" large>\n                        {{ k }}\n                      </v-btn>\n                      <v-btn v-if=\"light_mode\" @click=\"click_entrees(k), enable_all_buttons(k), enable_entree_buttons()\"\n                        :disabled=\"!isDisabled_entrees\" elevation=\"5\" class=\"ma-3\" depressed color=\"warning\" large>\n                        {{ k }}\n                      </v-btn>\n                    </a>\n                    <a v-for=\"k in subEntrees_name\" :key=\"k\">\n                      <v-btn v-if=\"dark_mode\" @click=\"click_entrees(k), enable_all_buttons(k), enable_entree_buttons(1)\"\n                        :disabled=\"!isDisabled_entrees\" elevation=\"10\" class=\"ma-3\" outlined color=\"orange\" large>\n                        {{ k }}\n                      </v-btn>\n                      <v-btn v-if=\"light_mode\"\n                        @click=\"click_entrees(k), enable_all_buttons(k), enable_entree_buttons(1)\"\n                        :disabled=\"!isDisabled_entrees\" elevation=\"5\" class=\"ma-3\" depressed color=\"warning\" large>\n                        {{ k }}\n                      </v-btn>\n                    </a>\n                  </div>\n                </v-card>\n              </v-col>\n            </v-row>\n          </center>\n\n          <br>\n\n          <!--Proteins-->\n          <center>\n            <v-row no-gutters>\n              <v-col v-for=\"n in 1\" :key=\"n\" :cols=\"n === 2 ? 5 : undefined\">\n                <v-card class=\"pa-2\" inlined tile>\n                  <h2 class=\"font-weight-bold\">\n                    Proteins\n                  </h2>\n                  <!--mainProteins / subProteins buttons-->\n                  <div class=\"ma-2\">\n                    <a v-for=\"k in mainProteins_name\" :key=\"k\">\n                      <v-btn v-if=\"dark_mode\"\n                        @click=\"click_proteins(k), disable_mainProteins_buttons(), enable_subProteins_buttons()\"\n                        :disabled=\"!isDisabled_mainProteins\" elevation=\"10\" class=\"ma-3\" outlined color=\"orange\" large>\n                        {{ k }}\n                      </v-btn>\n                      <v-btn v-if=\"light_mode\"\n                        @click=\"click_proteins(k), disable_mainProteins_buttons(), enable_subProteins_buttons()\"\n                        :disabled=\"!isDisabled_mainProteins\" elevation=\"5\" class=\"ma-3\" depressed color=\"warning\" large>\n                        {{ k }}\n                      </v-btn>\n                    </a>\n                    <a v-for=\"k in subProteins_name\" :key=\"k\">\n                      <v-btn v-if=\"dark_mode\" @click=\"click_proteins(k), disable_subProteins_buttons()\"\n                        :disabled=\"!isDisabled_subProteins\" elevation=\"10\" class=\"ma-3\" outlined color=\"orange\" large>\n                        {{ k }}\n                      </v-btn>\n                      <v-btn v-if=\"light_mode\" @click=\"click_proteins(k), disable_subProteins_buttons()\"\n                        :disabled=\"!isDisabled_subProteins\" elevation=\"5\" class=\"ma-3\" depressed color=\"warning\" large>\n                        {{ k }}\n                      </v-btn>\n                    </a>\n                  </div>\n                </v-card>\n              </v-col>\n            </v-row>\n          </center>\n\n          <br>\n\n          <!--Toppings-->\n          <center>\n            <v-row no-gutters>\n              <v-col v-for=\"n in 1\" :key=\"n\" :cols=\"n === 2 ? 5 : undefined\">\n                <v-card class=\"pa-2\" inlined tile>\n                  <h2 class=\"font-weight-bold\">\n                    Toppings\n                  </h2>\n                  <!--toppings buttons-->\n                  <div class=\"ma-2\">\n                    <a v-for=\"k in toppings_name\" :key=\"k\">\n                      <v-btn v-if=\"dark_mode\" @click=\"click_toppings(k)\" :disabled=\"!isDisabled\" elevation=\"10\"\n                        class=\"ma-3\" outlined color=\"orange\" large>\n                        {{ k }}\n                      </v-btn>\n                      <v-btn v-if=\"light_mode\" @click=\"click_toppings(k)\" :disabled=\"!isDisabled\" elevation=\"5\"\n                        class=\"ma-3\" depressed color=\"warning\" large>\n                        {{ k }}\n                      </v-btn>\n                    </a>\n                  </div>\n                </v-card>\n              </v-col>\n            </v-row>\n          </center>\n        </v-col>\n      </v-row>\n    </v-container>\n  </div>\n  <div v-else>\n    <v-container fluid>\n        <v-row align=\"center\" justify=\"center\">\n            <v-col>\n                <p class=\"text-h1\" style=\"text-align: center; padding-top: 20%\">\n                Not Signed In\n                </p>\n            </v-col>\n        </v-row>\n    </v-container>\n  </div>\n</template>\n<!----------Template----------->\n\n<!-----------Script------------>\n<script>\n// Clock import\nimport moment from 'moment'\nimport VueClock from '@dangvanthanh/vue-clock';\n\nimport { getItems, getLatestOrderId } from '../js/backend.js'\nimport { getLatestToppingUUID } from '../js/backend.js'\nimport { getLatestItemUUID } from '../js/backend.js'\nimport { insertOrder } from '../js/backend.js'\nimport { insertOrderItems } from '../js/backend.js'\nimport { insertOrderToppings } from '../js/backend.js'\nimport { getIdFromName } from '../js/backend.js'\nimport { incrementInventory } from '../js/backend.js'\nimport { getItemsFromCategory } from '../js/backend.js'\nimport { getToppings } from '../js/backend.js'\nimport { loadGoogle, userSignedIn } from '../js/login.js';\n\nexport default {\n  data: () => ({\n    dialog: false,\n    dialogDelete: false,\n    count: -1,\n    enable_toppings: false,\n    enable_entrees: true,\n    enalbe_mainProteins: false,\n    enable_subProteins: false,\n    tip: 0,\n    sub_total: 0,\n    total: 0,\n    calories_total: 0,\n    tip1: false,\n    tip2: false,\n    tip3: false,\n    tip4: false,\n    light_mode: false,\n    dark_mode: true,\n    current_time: moment(new Date()).utc().format('YYYY-DD-MM hh:mm:ss'),\n\n    latestOrderID: 0,\n    latestToppingUUID: 0,\n    latestItemUUID: 0,\n\n    // Layout\n    justify: [\n      'space-between',\n    ],\n\n    // Table\n    headers: [\n      {\n        text: 'Item Number',\n        align: 'start',\n        sortable: false,\n        value: 'number',\n      },\n      { text: 'Name', value: 'name' },\n      { text: 'Price', value: 'price' },\n      { text: 'Actions', value: 'actions', sortable: false },\n    ],\n\n    items: [],\n\n    entrees_array: [],\n\n    toppings_array: [],\n\n    editedIndex: -1,\n\n    editedItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n\n    defaultItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n\n    mainEntrees_all: [],\n    mainEntrees_name: [],\n    subEntrees_name: [],\n    subEntrees_all: [],\n    mainProteins_name: [],\n    mainProteins_all: [],\n    subProteins_name: [],\n    subProteins_all: [],\n    toppings_name: [],\n    toppings_all: [],\n    signedIn: false,\n\n  }), // data end\n\n  // computed\n  computed: {\n\n    formTitle() {\n      return this.editedIndex === -1 ? 'New Item' : 'Edit Item'\n    },\n\n    calculate_subTotal() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.sub_total_track = sum;\n      return this.sub_total = sum;\n    },\n\n    isDisabled() {\n      return this.enable_toppings;\n    },\n\n    isDisabled_mainProteins() {\n      return this.enalbe_mainProteins;\n    },\n\n    isDisabled_subProteins() {\n      return this.enable_subProteins;\n    },\n\n    isDisabled_entrees() {\n      return this.enable_entrees;\n    },\n\n    istip1() {\n      return this.tip1;\n    },\n\n    istip2() {\n      return this.tip2;\n    },\n\n    istip3() {\n      return this.tip3;\n    },\n\n    istip4() {\n      return this.tip4;\n    },\n\n    isdarkMode() {\n      return this.dark_mode;\n    },\n\n    isLightMode() {\n      return this.light_mode;\n    },\n\n    calculate_tip_1() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.05\n      return this.tip;\n    },\n\n    calculate_tip_2() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.10;\n      return this.tip;\n    },\n\n    calculate_tip_3() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.15;\n      return this.tip;\n    },\n\n    calculate_tip_4() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.tip = sum * 0.20;\n      return this.tip;\n    },\n\n    calculate_total() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.total = (sum + this.tip).toFixed(2);\n      return (sum + this.tip).toFixed(2);\n    },\n\n    calculate_total_calories() {\n      return this.calories_total;\n    },\n\n    ee() {\n\n    }\n\n\n\n\n  },\n\n  // watch\n  watch: {\n    dialog(val) {\n      val || this.close()\n    },\n    dialogDelete(val) {\n      val || this.closeDelete()\n    },\n  },\n\n  // Clock\n  components: { VueClock },\n\n  // methods\n  methods: {\n    // Entrees buttons\n    click_entrees(e) {\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (e === this.mainEntrees_all[i].name) {\n          this.count++;\n          this.calories_total += this.mainEntrees_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.mainEntrees_all[i].name,\n            price: this.mainEntrees_all[i].price,\n          })\n        }\n      }\n      this.entrees_array.push({\n        number: this.count,\n        name: e,\n      });\n    },\n\n    // Proteins buttons\n    click_proteins: function (e) {\n      for (let i = 0; i < this.mainProteins_all.length; i++) {\n        if (e === this.mainProteins_all[i].name) {\n          this.calories_total += this.mainProteins_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.mainProteins_all[i].name,\n            price: this.mainProteins_all[i].price,\n          })\n        }\n      }\n      this.toppings_array.push({\n        number: this.count,\n        name: e,\n      });\n    },\n\n    // Toppings buttons\n    click_toppings: function (e) {\n      for (let i = 0; i < this.toppings_all.length; i++) {\n        if (e === this.toppings_all[i].name) {\n          this.calories_total += this.toppings_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.toppings_all[i].name,\n            price: this.toppings_all[i].price,\n          })\n        }\n      }\n      this.toppings_array.push({\n        number: this.count,\n        name: e,\n      });\n    },\n\n    tip_control(k) {\n      if (k === 1) {\n        this.tip1 = true;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = false;\n      }\n      else if (k === 2) {\n        this.tip1 = false;\n        this.tip2 = true;\n        this.tip3 = false;\n        this.tip4 = false;\n      }\n      else if (k === 3) {\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = true;\n        this.tip4 = false;\n      }\n      else if (k === 4) {\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = true;\n      }\n    },\n\n    async enable_all_buttons(k) {\n      let array = await getItemsFromCategory('mainEntree');\n      for (let i = 0; i < array.length; i++) {\n        if (k === array[i].name) {\n          this.enable_toppings = true;\n          this.enalbe_mainProteins = true;\n          this.enable_subProteins = false;\n        }\n      }\n    },\n\n    enable_entree_buttons(k) {\n      this.enable_entrees = false;\n\n      if (k === 1) {\n        this.enable_entrees = true;\n      }\n    },\n\n    disable_mainProteins_buttons(k) {\n      this.enalbe_mainProteins = false;\n    },\n\n    enable_subProteins_buttons() {\n      this.enable_subProteins = true;\n    },\n\n    disable_subProteins_buttons() {\n      this.enable_subProteins = false;\n    },\n\n    addItem() {\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n\n      let empty_array = [{\n        number: '',\n        name: '',\n        price: 0,\n      }];\n      this.items.push({\n        number: '',\n        name: '',\n        price: 0,\n      });\n    },\n\n    async deleteItem(item) {\n      this.editedIndex = this.items.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogDelete = true\n      this.items.splice(this.editedIndex, 1)\n      this.closeDelete()\n\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (item.name === this.mainEntrees_all[i].name) {\n          this.count -= 1;\n          this.enable_entrees = true;\n          this.enalbe_mainProteins = false;\n          this.enable_subProteins = false;\n          this.enable_toppings = false;\n          this.entrees_array.pop(this.entrees_array.length - 1);\n        }\n      }\n\n      let array = await getItemsFromCategory('mainProtein')\n      for (let j = 0; j < array.length; j++) {\n        if (item.name === array[j].name) {\n          this.enalbe_mainProteins = true;\n          this.enable_subProteins = false;\n        }\n      }\n\n      for (let m = 0; m < this.subProteins_all.length; m++) {\n        if (item.name === this.subProteins_all[m].name) {\n          this.enable_subProteins = true;\n        }\n      }\n\n      let array2 = await getItemsFromCategory('mainProtein');\n      for (let p = 0; p < this.subProteins_all.length; p++) {\n        array2.push(this.subProteins_all[p]);\n      }\n      for (let o = 0; o < this.toppings_all.length; o++) {\n        array2.push(this.toppings_all[o]);\n      }\n      for (let l = 0; l < array2.length; l++) {\n        if (item.name === array2[l].name) {\n          this.toppings_array.pop(this.toppings_array.length - 1);\n        }\n      }\n\n      let array3 = await getItems();\n      for (let u = 0; u < array2.length; u++) {\n        array3.push(array2[u]);\n      }\n      for (let y = 0; y < array3.length; y++) {\n        if (item.name === array3[y].name) {\n          this.calories_total -= array3[y].calories;\n        }\n      }\n    },\n\n    deleteAllItem(e) {\n      if (e == 'clear') {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i)\n        }\n        this.entrees_array = [];\n        this.toppings_array = [];\n        this.count = -1;\n        this.enalbe_mainProteins = false;\n        this.enable_subProteins = false;\n        this.enable_toppings = false;\n        this.enable_entrees = true;\n        this.tip = 0;\n        this.total = 0;\n        this.sub_total = 0;\n        this.calories_total = 0;\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = false;\n        alert(\"Cleared!\")\n      }\n      else {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i)\n        }\n      }\n    },\n\n    closeDelete() {\n      this.dialogDelete = false\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      })\n    },\n\n    getData(data) {\n      alert(data)\n    },\n\n    light_mode_button() {\n      this.$vuetify.theme.dark = false;\n      this.dark_mode = false;\n    },\n\n    light_mode_button_outlined() {\n      this.$vuetify.theme.dark = false;\n      this.light_mode = true;\n      this.dark_mode = false;\n    },\n\n    dark_mode_button() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n    },\n\n    dark_mode_button_outlined() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n      this.dark_mode = true;\n    },\n\n    async getOrderID() {\n      this.latestOrderID = await getLatestOrderId();\n    },\n\n    async getToppingUUID() {\n      this.latestToppingUUID = await getLatestToppingUUID();\n    },\n\n    async getItemUUID() {\n      this.latestItemUUID = await getLatestItemUUID();\n    },\n\n    async updateItems() {\n      let a = await getItemsFromCategory(\"mainEntree\");\n      this.mainEntrees_name.splice(0);\n      for (let i = 0; i < a.length; i++) {\n        if (a[i].name != null) {\n          this.mainEntrees_name.push(a[i].name);\n        }\n      }\n\n      let b = await getItemsFromCategory(\"subEntree\");\n      this.subEntrees_name.splice(0);\n      for (let j = 0; j < b.length; j++) {\n        if (b[j].name != null) {\n          this.subEntrees_name.push(b[j].name);\n        }\n      }\n\n      let c = await getItemsFromCategory(\"mainProtein\");\n      this.mainProteins_name.splice(0);\n      for (let n = 0; n < c.length; n++) {\n        if (c[n].name != null) {\n          this.mainProteins_name.push(c[n].name);\n        }\n      }\n\n      let d = await getItemsFromCategory(\"subProtein\");\n      this.subProteins_name.splice(0);\n      for (let m = 0; m < d.length; m++) {\n        if (d[m].name != null) {\n          this.subProteins_name.push(d[m].name);\n        }\n      }\n\n      let e = await getItemsFromCategory(\"topping\");\n      this.toppings_name.splice(0);\n      for (let u = 0; u < e.length; u++) {\n        if (e[u].name != null) {\n          this.toppings_name.push(e[u].name);\n        }\n      }\n    },\n\n    async insertOrderTable() {\n      await insertOrder(this.latestOrderID + 1, this.calories_total, this.sub_total, this.tip, this.total, this.current_time);\n\n      let c = 1;\n      if (this.entrees_array != []) {\n        for (let i = 0; i < this.entrees_array.length; i++) {\n          let id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await insertOrderItems(this.latestItemUUID + c, this.latestOrderID + 1, this.entrees_array[i].number, id_entrees, this.entrees_array[i].name);\n          let inventroy_id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await incrementInventory(inventroy_id_entrees);\n          c += 1;\n        }\n      }\n\n      let d = 1;\n      if (this.toppings_array != []) {\n        for (let j = 0; j < this.toppings_array.length; j++) {\n          let id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await insertOrderToppings(this.latestToppingUUID + d, this.latestOrderID + 1, this.toppings_array[j].number, id_toppings, this.toppings_array[j].name);\n          let inventory_id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await incrementInventory(inventory_id_toppings);\n          d += 1;\n        }\n      }\n      this.entrees_array = [];\n      this.toppings_array = [];\n      this.count = -1;\n      this.latestOrderID = await getLatestOrderId();\n      this.latestItemUUID = await getLatestItemUUID();\n      this.latestToppingUUID = await getLatestToppingUUID();\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.tip = 0;\n      this.total = 0;\n      this.sub_total = 0;\n      this.calories_total = 0;\n      this.tip1 = false;\n      this.tip2 = false;\n      this.tip3 = false;\n      this.tip4 = false;\n    },\n\n    async getItemInfo() {\n      this.mainEntrees_all = await getItems();\n      this.mainProteins_all = await getItemsFromCategory('mainProtein');\n      this.subProteins_all = await getItemsFromCategory('subProtein');\n      for (let i = 0; i < this.subProteins_all.length; i++) {\n        this.mainProteins_all.push(this.subProteins_all[i]);\n      }\n      this.toppings_all = await getItemsFromCategory('topping');\n    }\n  },\n\n  async created() {\n    this.signedIn = await loadGoogle();\n    console.log(this.signedIn);\n    await userSignedIn(this.$route.params.credential);\n    await this.updateItems();\n    await this.getItemInfo();\n  },\n\n  async mounted() {\n    await this.getOrderID();\n    await this.getToppingUUID();\n    await this.getItemUUID();\n    await this.getIdFromName();\n  },\n\n}\n</script>\n<!-----------Script------------>\n\n\n<!-----------Style------------->\n<style>\n\n</style>\n<!-----------Style------------->\n"]},"metadata":{},"sourceType":"module"}