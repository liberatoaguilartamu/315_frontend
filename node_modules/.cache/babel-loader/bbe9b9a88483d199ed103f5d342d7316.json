{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import HelloWorld from '../components/HelloWorld'\nimport { loadGoogle, userSignedIn } from '../js/login.js';\nimport { getItems, getLatestOrderId } from '../js/backend.js';\nimport { getLatestToppingUUID } from '../js/backend.js';\nimport { getLatestItemUUID } from '../js/backend.js';\nimport { insertOrder } from '../js/backend.js';\nimport { insertOrderItems } from '../js/backend.js';\nimport { insertOrderToppings } from '../js/backend.js';\nimport { getIdFromName } from '../js/backend.js';\nimport { incrementInventory } from '../js/backend.js';\nimport { getItemsFromCategory } from '../js/backend.js';\nimport { getToppings } from '../js/backend.js';\nexport default {\n  // for checkout\n\n  data: () => ({\n    signedIn: false,\n    cart_total: 0,\n    total: 0,\n    sub_total: 0,\n    show: false,\n    dialog: false,\n    dialogDelete: false,\n    count: -1,\n    enable_toppings: false,\n    enable_entrees: true,\n    enalbe_mainProteins: false,\n    enable_subProteins: false,\n    enable_delete: false,\n    tip: 0,\n    calories_total: 0,\n    tip1: false,\n    tip2: false,\n    tip3: false,\n    tip4: false,\n    light_mode: false,\n    dark_mode: true,\n    flag_delete: false,\n    current_time: moment(new Date()).format('YYYY-MM-DD hh:mm:ss'),\n    topping_count: 0,\n    subProtein_count: 0,\n    latestOrderID: 0,\n    latestToppingUUID: 0,\n    latestItemUUID: 0,\n    // Layout\n    justify: ['space-between'],\n    // Table\n    headers: [{\n      text: 'Item Number',\n      align: 'start',\n      sortable: false,\n      value: 'number'\n    }, {\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Price',\n      value: 'price'\n    }, {\n      text: 'Actions',\n      value: 'actions',\n      sortable: false\n    }],\n    items: [],\n    order: [],\n    entrees_array: [],\n    toppings_array: [],\n    editedIndex: -1,\n    editedItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n    defaultItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n    all_items: [],\n    mainEntrees_all: [],\n    mainEntrees_name: [],\n    subEntrees_name: [],\n    subEntrees_all: [],\n    mainProteins_name: [],\n    mainProteins_all: [],\n    mainProteins_all2: [],\n    subProteins_name: [],\n    subProteins_all: [],\n    toppings_name: [],\n    toppings_all: []\n  }),\n  // data end\n\n  // computed\n  computed: {\n    calculate_subTotal() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.sub_total_track = sum;\n      return this.sub_total = sum;\n    },\n    isDisabled() {\n      return this.enable_toppings;\n    },\n    isDisabled_mainProteins() {\n      return this.enalbe_mainProteins;\n    },\n    isDisabled_subProteins() {\n      return this.enable_subProteins;\n    },\n    isDisabled_entrees() {\n      return this.enable_entrees;\n    },\n    isDisabled_delete() {\n      return this.enable_delete;\n    },\n    calculate_total() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.total = (sum + this.tip).toFixed(2);\n      return (sum + this.tip).toFixed(2);\n    },\n    calculate_total_calories() {\n      return this.calories_total;\n    }\n  },\n  // watch\n  watch: {},\n  // Clock\n  components: {\n    VueClock\n  },\n  // methods\n  methods: {\n    clickList() {\n      this.$router.push({\n        path: \"ClickList\",\n        query: {\n          sub_total: sub_total\n        }\n      });\n    },\n    move() {\n      this.$router.push({\n        path: 'checkout',\n        query: {\n          sub_total: this.sub_total,\n          toppings_array: this.toppings_array,\n          entrees_array: this.entrees_array\n        }\n      });\n    },\n    calculate_cart_total() {\n      this.cart_total += this.sub_total;\n    },\n    // Entrees buttons\n    click_entrees(e) {\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (e === this.mainEntrees_all[i].name) {\n          this.count_update();\n          this.calories_total += this.mainEntrees_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.mainEntrees_all[i].name,\n            price: this.mainEntrees_all[i].price\n          });\n        }\n      }\n      this.entrees_array.push({\n        number: this.count,\n        name: e\n      });\n      this.order.push({\n        number: this.count,\n        name: e\n      });\n      this.flag_delete = false;\n    },\n    count_update() {\n      if (this.count > -1) {\n        this.count = this.items[this.items.length - 1].number + 1;\n      } else {\n        this.count += 1;\n      }\n    },\n    // Proteins buttons\n    click_proteins(e) {\n      if (this.flag_delete) {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.splice(this.editedIndex, 0, {\n              number: this.items[this.editedIndex - 1].number,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price\n            });\n          }\n        }\n        this.toppings_array.push({\n          number: this.items[this.editedIndex - 1].number,\n          name: e\n        });\n      } else {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.push({\n              number: this.count,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price\n            });\n          }\n        }\n        this.toppings_array.push({\n          number: this.count,\n          name: e\n        });\n        this.order.push({\n          number: this.count,\n          name: e\n        });\n      }\n      this.flag_delete = false;\n    },\n    click_subProteins(e) {\n      if (this.flag_delete) {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.splice(this.editedIndex, 0, {\n              number: this.items[this.editedIndex - 1].number,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price\n            });\n          }\n        }\n        this.toppings_array.push({\n          number: this.items[this.editedIndex - 1].number,\n          name: e\n        });\n      } else {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.push({\n              number: this.count,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price\n            });\n          }\n        }\n        this.toppings_array.push({\n          number: this.count,\n          name: e\n        });\n        this.order.push({\n          number: this.count,\n          name: e\n        });\n      }\n      this.flag_delete = false;\n      this.subProtein_count += 1;\n    },\n    // Toppings buttons\n    click_toppings(e) {\n      if (this.flag_delete) {\n        for (let i = 0; i < this.toppings_all.length; i++) {\n          if (e === this.toppings_all[i].name) {\n            this.calories_total += this.toppings_all[i].calories;\n            this.items.splice(this.editedIndex, 0, {\n              number: this.items[this.editedIndex - 1].number,\n              name: this.toppings_all[i].name,\n              price: this.toppings_all[i].price\n            });\n          }\n        }\n        this.toppings_array.push({\n          number: this.items[this.editedIndex - 1].number,\n          name: e\n        });\n        let count = 4;\n        count -= 1;\n        this.enable_toppings_button(count);\n      } else {\n        for (let i = 0; i < this.toppings_all.length; i++) {\n          if (e === this.toppings_all[i].name) {\n            this.calories_total += this.toppings_all[i].calories;\n            this.items.push({\n              number: this.count,\n              name: this.toppings_all[i].name,\n              price: this.toppings_all[i].price\n            });\n          }\n        }\n        this.toppings_array.push({\n          number: this.count,\n          name: e\n        });\n        this.order.push({\n          number: this.count,\n          name: e\n        });\n      }\n      this.flag_delete = false;\n      this.topping_count += 1;\n      this.enable_toppings_button(this.topping_count);\n    },\n    enable_toppings_button(e) {\n      if (this.topping_count > 3) {\n        this.enable_toppings = false;\n      } else {\n        this.enable_toppings = true;\n      }\n    },\n    async enable_all_buttons(k) {\n      let array = await getItemsFromCategory('mainEntree');\n      for (let i = 0; i < array.length; i++) {\n        if (k === array[i].name) {\n          this.enable_toppings = true;\n          this.enalbe_mainProteins = true;\n          this.enable_subProteins = false;\n        }\n      }\n    },\n    enable_entree_buttons(k) {\n      this.enable_entrees = false;\n      if (k === 1) {\n        this.enable_entrees = true;\n      }\n    },\n    disable_mainProteins_buttons(k) {\n      this.enalbe_mainProteins = false;\n    },\n    enable_subProteins_buttons() {\n      this.enable_subProteins = true;\n    },\n    disable_subProteins_buttons() {\n      this.enable_subProteins = false;\n    },\n    addItem() {\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      this.flag_delete = false;\n      this.topping_count = 0;\n\n      // this.items.push({\n      //   number: this.count,\n      //   name: '',\n      //   price: 0,\n      // });\n    },\n\n    async deleteItem(item) {\n      this.editedIndex = this.items.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n      this.flag_delete = true;\n      let mainEntrees_flag = false;\n      for (let d = 0; d < this.toppings_all.length; d++) {\n        if (item.name === this.toppings_all[d].name) {\n          this.topping_count -= 1;\n          this.enable_toppings_button(this.topping_count);\n        }\n      }\n\n      // check_buttons(item);\n\n      // check if item is one of the mainEntrees items\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (item.name === this.mainEntrees_all[i].name) {\n          this.count -= 1;\n          this.enable_entrees = true;\n          this.enalbe_mainProteins = false;\n          this.enable_subProteins = false;\n          this.enable_toppings = false;\n          this.flag_delete = false;\n          mainEntrees_flag = true;\n        }\n      }\n\n      // if mainEntrees item was removed, remove all proteins and toppings\n      var q = 0;\n      var r = 0;\n      var s = 0;\n      if (mainEntrees_flag) {\n        while (q < this.items.length) {\n          if (this.items[q].number === item.number) {\n            this.remove_calories(this.items[q].name);\n            this.remove_count(this.items[q].name);\n            this.items.splice(q, 1);\n          } else {\n            ++q;\n          }\n        }\n        while (r < this.toppings_array.length) {\n          if (this.toppings_array[r].number === item.number) {\n            this.toppings_array.splice(r, 1);\n          } else {\n            ++r;\n          }\n        }\n        // splice from entrees_array\n        for (let t = 0; t < this.entrees_array.length; t++) {\n          if (item.name === this.entrees_array[t].name && item.number === this.entrees_array[t].number) {\n            this.entrees_array.splice(t, 1);\n          }\n        }\n      } else {\n        this.items.splice(this.editedIndex, 1);\n        this.remove_calories(item.name);\n        // splice from toppings_array\n        for (let g = 0; g < this.toppings_array.length; g++) {\n          if (item.name === this.toppings_array[g].name && item.number === this.toppings_array[g].number) {\n            this.toppings_array.splice(g, 1);\n          }\n        }\n\n        // enable mainProteins and disable subProteins buttons\n        let array = await getItemsFromCategory('mainProtein');\n        for (let j = 0; j < array.length; j++) {\n          if (item.name === array[j].name) {\n            this.enalbe_mainProteins = true;\n            this.enable_subProteins = false;\n          }\n        }\n\n        // enable subProteins button\n        for (let m = 0; m < this.subProteins_all.length; m++) {\n          if (item.name === this.subProteins_all[m].name) {\n            this.enable_subProteins = true;\n          }\n        }\n      }\n    },\n    remove_count(e) {\n      for (let i = 0; i < this.toppings_all.length; i++) {\n        if (e === this.toppings_all[i].name) {\n          this.topping_count -= 1;\n        }\n      }\n    },\n    remove_calories(e) {\n      for (let i = 0; i < this.all_items.length; i++) {\n        if (e === this.all_items[i].name) {\n          this.calories_total -= this.all_items[i].calories;\n        }\n      }\n    },\n    async make_all_items() {\n      this.all_items = await getItems();\n      let array2 = await getItemsFromCategory('mainProtein');\n      for (let p = 0; p < this.subProteins_all.length; p++) {\n        array2.push(this.subProteins_all[p]);\n      }\n      for (let o = 0; o < this.toppings_all.length; o++) {\n        array2.push(this.toppings_all[o]);\n      }\n      for (let u = 0; u < array2.length; u++) {\n        this.all_items.push(array2[u]);\n      }\n    },\n    deleteAllItem(e) {\n      if (e == 'clear') {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i);\n        }\n        this.entrees_array = [];\n        this.toppings_array = [];\n        this.count = -1;\n        this.enalbe_mainProteins = false;\n        this.enable_subProteins = false;\n        this.enable_toppings = false;\n        this.enable_entrees = true;\n        this.tip = 0;\n        this.total = 0;\n        this.sub_total = 0;\n        this.calories_total = 0;\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = false;\n        this.flag_delete = false;\n        this.topping_count = 0;\n        alert(\"Cleared!\");\n      } else {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i);\n        }\n      }\n    },\n    getData(data) {\n      alert(data);\n    },\n    light_mode_button() {\n      this.$vuetify.theme.dark = false;\n      this.dark_mode = false;\n    },\n    light_mode_button_outlined() {\n      this.$vuetify.theme.dark = false;\n      this.light_mode = true;\n      this.dark_mode = false;\n    },\n    dark_mode_button() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n    },\n    dark_mode_button_outlined() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n      this.dark_mode = true;\n    },\n    async getOrderID() {\n      this.latestOrderID = await getLatestOrderId();\n    },\n    async getToppingUUID() {\n      this.latestToppingUUID = await getLatestToppingUUID();\n    },\n    async getItemUUID() {\n      this.latestItemUUID = await getLatestItemUUID();\n    },\n    async updateItems() {\n      let a = await getItemsFromCategory(\"mainEntree\");\n      this.mainEntrees_name.splice(0);\n      for (let i = 0; i < a.length; i++) {\n        if (a[i].name != null) {\n          this.mainEntrees_name.push(a[i].name);\n        }\n      }\n      let b = await getItemsFromCategory(\"subEntree\");\n      this.subEntrees_name.splice(0);\n      for (let j = 0; j < b.length; j++) {\n        if (b[j].name != null) {\n          this.subEntrees_name.push(b[j].name);\n        }\n      }\n      let c = await getItemsFromCategory(\"mainProtein\");\n      this.mainProteins_name.splice(0);\n      for (let n = 0; n < c.length; n++) {\n        if (c[n].name != null) {\n          this.mainProteins_name.push(c[n].name);\n        }\n      }\n      let d = await getItemsFromCategory(\"subProtein\");\n      this.subProteins_name.splice(0);\n      for (let m = 0; m < d.length; m++) {\n        if (d[m].name != null) {\n          this.subProteins_name.push(d[m].name);\n        }\n      }\n      let e = await getItemsFromCategory(\"topping\");\n      this.toppings_name.splice(0);\n      for (let u = 0; u < e.length; u++) {\n        if (e[u].name != null) {\n          this.toppings_name.push(e[u].name);\n        }\n      }\n    },\n    async insertOrderTable() {\n      await insertOrder(this.latestOrderID + 1, this.calories_total, this.sub_total, this.tip, this.total, this.current_time);\n      let c = 1;\n      if (this.entrees_array != []) {\n        for (let i = 0; i < this.entrees_array.length; i++) {\n          let id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await insertOrderItems(this.latestItemUUID + c, this.latestOrderID + 1, this.entrees_array[i].number, id_entrees, this.entrees_array[i].name);\n          let inventroy_id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await incrementInventory(inventroy_id_entrees);\n          c += 1;\n        }\n      }\n      let d = 1;\n      if (this.toppings_array != []) {\n        for (let j = 0; j < this.toppings_array.length; j++) {\n          let id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await insertOrderToppings(this.latestToppingUUID + d, this.latestOrderID + 1, this.toppings_array[j].number, id_toppings, this.toppings_array[j].name);\n          let inventory_id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await incrementInventory(inventory_id_toppings);\n          d += 1;\n        }\n      }\n      this.entrees_array = [];\n      this.toppings_array = [];\n      this.count = -1;\n      this.latestOrderID = await getLatestOrderId();\n      this.latestItemUUID = await getLatestItemUUID();\n      this.latestToppingUUID = await getLatestToppingUUID();\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.tip = 0;\n      this.total = 0;\n      this.sub_total = 0;\n      this.calories_total = 0;\n      this.tip1 = false;\n      this.tip2 = false;\n      this.tip3 = false;\n      this.tip4 = false;\n      this.flag_delete = false;\n      this.topping_count = 0;\n    },\n    async getItemInfo() {\n      this.mainEntrees_all = await getItems();\n      this.mainProteins_all = await getItemsFromCategory('mainProtein');\n      this.subProteins_all = await getItemsFromCategory('subProtein');\n      for (let i = 0; i < this.subProteins_all.length; i++) {\n        this.mainProteins_all.push(this.subProteins_all[i]);\n      }\n      this.mainProteins_all2 = await getItemsFromCategory('mainProtein');\n      this.toppings_all = await getItemsFromCategory('topping');\n    }\n  },\n  async created() {\n    await this.updateItems();\n    await this.getItemInfo();\n    await this.make_all_items();\n    await loadGoogle();\n    this.signedIn = await userSignedIn(this.$route.params.credential);\n  },\n  async mounted() {\n    await this.getOrderID();\n    await this.getToppingUUID();\n    await this.getItemUUID();\n    await this.getIdFromName();\n  }\n};","map":{"version":3,"mappings":";AAgPA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACA;;EAMAA;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IAEAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IAEAC;IAEAC;IACAC;IACAC;IAEA;IACAC,UACA,gBACA;IAEA;IACAC,UACA;MACAC;MACAC;MACAC;MACAC;IACA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;IAAA,GACA;MAAAH;MAAAG;MAAAD;IAAA,EACA;IAEAE;IAEAC;IAEAC;IAEAC;IAEAC;IAEAC;MACAC;MACAC;MACAC;IACA;IAEAC;MACAH;MACAC;MACAC;IACA;IAEAE;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EAEA;EAAA;;EAEA;EACAC;IACAC;MACA;MACA;QACAC;MACA;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;QACAN;MACA;MACA;MACA;IACA;IAEAO;MACA;IACA;EACA;EAIA;EACAC,QACA;EAEA;EACAC;IAAAC;EAAA;EAEA;EACAC;IACAC;MACA;QACAC;QACAC;UAAArE;QAAA;MACA;IACA;IAEAsE;MACA;QACAF;QACAC;UACArE;UACAkC;UACAD;QACA;MACA;IACA;IAEAsC;MACA;IACA;IAEA;IACAC;MACA;QACA;UACA;UACA;UACA;YACAnC;YACAC;YACAC;UACA;QACA;MACA;MACA;QACAF;QACAC;MACA;MACA;QACAD;QACAC;MACA;MACA;IACA;IAEAmC;MACA;QACA;MACA,OACA;QACA;MACA;IACA;IAEA;IACAC;MACA;QACA;UACA;YACA;YACA;cACArC;cACAC;cACAC;YACA;UACA;QACA;QACA;UACAF;UACAC;QACA;MACA,OACA;QACA;UACA;YACA;YACA;cACAD;cACAC;cACAC;YACA;UACA;QACA;QACA;UACAF;UACAC;QACA;QACA;UACAD;UACAC;QACA;MACA;MACA;IACA;IAEAqC;MACA;QACA;UACA;YACA;YACA;cACAtC;cACAC;cACAC;YACA;UACA;QACA;QACA;UACAF;UACAC;QACA;MACA,OACA;QACA;UACA;YACA;YACA;cACAD;cACAC;cACAC;YACA;UACA;QACA;QACA;UACAF;UACAC;QACA;QACA;UACAD;UACAC;QACA;MACA;MACA;MACA;IACA;IAEA;IACAsC;MACA;QACA;UACA;YACA;YACA;cACAvC;cACAC;cACAC;YACA;UACA;QACA;QACA;UACAF;UACAC;QACA;QACA;QACAlC;QACA;MACA,OACA;QACA;UACA;YACA;YACA;cACAiC;cACAC;cACAC;YACA;UACA;QACA;QACA;UACAF;UACAC;QACA;QACA;UACAD;UACAC;QACA;MACA;MACA;MACA;MACA;IACA;IAEAuC;MACA;QACA;MACA,OACA;QACA;MACA;IACA;IAEA;MACA;MACA;QACA;UACA;UACA;UACA;QACA;MACA;IACA;IAEAC;MACA;MAEA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;IACA;;IAEA;MACA;MACA;MACA;MACA;MACA;MAEA;QACA;UACA;UACA;QACA;MACA;;MAEA;;MAEA;MACA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;UACAC;QACA;MACA;;MAEA;MACA;MACA;MACA;MAEA;QACA;UACA;YACA;YACA;YACA;UACA,OACA;YACA;UACA;QACA;QACA;UACA;YACA;UACA,OACA;YACA;UACA;QACA;QACA;QACA;UACA,gDACAC;YACA;UACA;QACA;MACA,OACA;QACA;QACA;QACA;QACA;UACA,iDACAA;YACA;UACA;QACA;;QAEA;QACA;QACA;UACA;YACA;YACA;UACA;QACA;;QAEA;QACA;UACA;YACA;UACA;QACA;MACA;IACA;IAEAC;MACA;QACA;UACA;QACA;MACA;IACA;IAEAC;MACA;QACA;UACA;QACA;MACA;IACA;IAEA;MACA;MAEA;MACA;QACAC;MACA;MACA;QACAA;MACA;MAEA;QACA;MACA;IACA;IAEAC;MACA;QACA;UACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAC;MACA,OACA;QACA;UACA;QACA;MACA;IACA;IAEAC;MACAD;IACA;IAEAE;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;MAEA;MACA;MACA;QACA;UACA;QACA;MACA;IACA;IAEA;MACA;MAEA;MACA;QACA;UACA;UACA;UACA;UACA;UACAC;QACA;MACA;MAEA;MACA;QACA;UACA;UACA;UACA;UACA;UACAC;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEA;MACA;MACA;MACA;MACA;QACA;MACA;MACA;MACA;IACA;EACA;EAEA;IACA;IACA;IACA;IACA;IACA;EACA;EAEA;IACA;IACA;IACA;IACA;EACA;AAEA","names":["data","signedIn","cart_total","total","sub_total","show","dialog","dialogDelete","count","enable_toppings","enable_entrees","enalbe_mainProteins","enable_subProteins","enable_delete","tip","calories_total","tip1","tip2","tip3","tip4","light_mode","dark_mode","flag_delete","current_time","topping_count","subProtein_count","latestOrderID","latestToppingUUID","latestItemUUID","justify","headers","text","align","sortable","value","items","order","entrees_array","toppings_array","editedIndex","editedItem","number","name","price","defaultItem","all_items","mainEntrees_all","mainEntrees_name","subEntrees_name","subEntrees_all","mainProteins_name","mainProteins_all","mainProteins_all2","subProteins_name","subProteins_all","toppings_name","toppings_all","computed","calculate_subTotal","sum","isDisabled","isDisabled_mainProteins","isDisabled_subProteins","isDisabled_entrees","isDisabled_delete","calculate_total","calculate_total_calories","watch","components","VueClock","methods","clickList","path","query","move","calculate_cart_total","click_entrees","count_update","click_proteins","click_subProteins","click_toppings","enable_toppings_button","enable_entree_buttons","disable_mainProteins_buttons","enable_subProteins_buttons","disable_subProteins_buttons","addItem","mainEntrees_flag","item","remove_count","remove_calories","array2","deleteAllItem","alert","getData","light_mode_button","light_mode_button_outlined","dark_mode_button","dark_mode_button_outlined","c","d"],"sourceRoot":"src/views","sources":["ClientView.vue"],"sourcesContent":["<!----------Template----------->\n<template>\n  <div v-if=\"signedIn\">\n    <!--Top-->\n    {{ order }}\n    <v-container class=\"Top\">\n      <v-row v-for=\"j in justify\" :key=\"j\" :justify=\"j\">\n        <v-col v-for=\"k in 1\" :key=\"k\">\n          <v-col>\n            <v-img src=\"./images/pom.png\" width=\"300\"></v-img>\n          </v-col>\n        </v-col>\n        <v-col v-for=\"k in 1\" :key=\"k\">\n          <!--ColorBlind mode button-->\n          <v-switch v-model=\"singleExpand\" label=\"Colorblind Mode\"></v-switch>\n        </v-col>\n      </v-row>\n    </v-container>\n\n    <!--Middle-->\n    <v-container class=\"Mid\">\n      <v-row v-for=\"j in justify\" :key=\"j\" :justify=\"j\">\n        <!--Left side-->\n        <v-col v-for=\"k in 1\" :key=\"k\">\n          <v-navigation-drawer color=\"#grey\" permanent width=\"180\" mini-variant-width=\"120\" expand-on-hover app>\n            <br>\n            <br>\n            <p1 class=\"yourOrder\">\n              Your order:\n              <br>\n            </p1>\n            <br>\n            <v-card class=\"pa-2\">\n              <p1 v-for=\"k in entrees_array\" :key=\"k\" class=\"Entree\">\n                {{ k.name }}\n                <br>\n              </p1>\n              <p1 v-for=\"k in toppings_array\" :key=\"k\" class=\"topping\">\n                - {{ k.name }}\n                <br>\n              </p1>\n            </v-card>\n            <br>\n            <p1>\n              Total: $\n              {{ sub_total.toFixed(2) }}\n            </p1>\n            <br></br>\n            <center>\n              <v-btn @click=\"deleteAllItem('clear')\" small color=\"red\">Clear</v-btn>\n              <br><br>\n              <v-btn @click=\"calculate_cart_total(), addItem(), getData('Add Your Next Item!')\" small color=\"#4174D9\">\n                Add to cart</v-btn>\n              <br><br>\n              <p1>\n                Your cart: $\n                {{ cart_total.toFixed(2) }}\n              </p1>\n              <v-card class=\"pa-2\">\n                <v-btn @click.prevent=\"move()\" small color=\"#4174D9\">Checkout</v-btn>\n              </v-card>\n            </center>\n\n          </v-navigation-drawer>\n\n          <!--tip buttons-->\n          <v-card class=\"pa-2\">\n            <v-col>\n              <h1>\n                STEP 1.\n              </h1>\n              <p1>\n                Choose your entree or drink\n              </p1>\n              <br><br>\n\n              <v-row>\n                <a v-for=\"k in mainEntrees_all\" :key=\"k\">\n                  <v-card outlined class=\"ma-10\" width=\"300\" :disabled=\"!isDisabled_entrees\"\n                    @click=\"click_entrees(k.name), enable_all_buttons(k.name), enable_entree_buttons()\">\n                    <a v-if=\"k.name === 'Gyros'\">\n                      <v-img src=\"./images/Gyros.jpg\" height=\"180px\"></v-img>\n                    </a>\n                    <a v-else-if=\"k.name === 'Bowls'\">\n                      <v-img src=\"./images/Bowls.jpeg\" height=\"180px\"></v-img>\n                    </a>\n                    <a v-else-if=\"k.name === 'Hummus & Pita'\">\n                      <v-img src=\"./images/Hummus.jpeg\" height=\"180px\"></v-img>\n                    </a>\n                    <a v-else-if=\"k.name === 'Two Falafels'\">\n                      <v-img src=\"./images/Falafels.jpg\" height=\"180px\"></v-img>\n                    </a>\n                    <a v-else-if=\"k.name === 'Drink'\">\n                      <v-img src=\"./images/Drink.jpeg\" height=\"180px\"></v-img>\n                    </a>\n\n                    <div class=\"text-center\">\n                      <h2>\n                        {{ k.name }}\n                      </h2>\n                      <v-card-subtitle>\n                        $ {{ k.price }}\n                        <br>\n                        Calories: {{ k.calories }}\n                        <br>\n                        <a v-if=\"k.name === 'Gyros' || k.name === 'Bowls'\">\n                          1 protein & 4 toppings\n                        </a>\n                      </v-card-subtitle>\n                    </div>\n                  </v-card>\n                </a>\n              </v-row>\n            </v-col>\n          </v-card>\n          <br>\n\n          <v-card class=\"pa-2\" inlined tile>\n            <v-col>\n              <h1>\n                STEP 2.\n              </h1>\n              <p2>\n                Choose 1 protein\n              </p2>\n              <br><br>\n\n              <v-row>\n                <!-- mainProtein -->\n                <a v-for=\"k in mainProteins_all2\" :key=\"k\">\n                  <v-card outlined class=\"ma-10\" width=\"200\"\n                    @click=\"click_proteins(k.name), disable_mainProteins_buttons(), enable_subProteins_buttons()\"\n                    :disabled=\"!isDisabled_mainProteins\">\n\n                    <div class=\"text-center\">\n                      <h2>\n                        {{ k.name }}\n                      </h2>\n\n                      <v-card-subtitle>\n                        $ {{ k.price }}\n                        <br>\n                        Calories: {{ k.calories }}\n                      </v-card-subtitle>\n                    </div>\n                  </v-card>\n                </a>\n\n                <!-- subProtein -->\n                <a v-for=\"k in subProteins_all\" :key=\"k\">\n                  <v-card outlined class=\"ma-10\" width=\"200\"\n                    @click=\"click_subProteins(k.name), disable_subProteins_buttons()\"\n                    :disabled=\"!isDisabled_subProteins\">\n\n                    <div class=\"text-center\">\n                      <h2>\n                        {{ k.name }}\n                      </h2>\n\n                      <v-card-subtitle>\n                        $ {{ k.price }}\n                        <br>\n                        Calories: {{ k.calories }}\n                      </v-card-subtitle>\n                    </div>\n                  </v-card>\n                </a>\n              </v-row>\n            </v-col>\n          </v-card>\n          <br>\n\n          <v-card class=\"pa-2\" inlined tile>\n            <v-col>\n              <h1>\n                STEP 3.\n              </h1>\n              <p2>\n                Choose 3 toppings & 1 sauce\n              </p2>\n              <br><br>\n\n              <v-row>\n                <!-- topping -->\n                <a v-for=\"k in toppings_all\" :key=\"k\">\n                  <v-card outlined class=\"ma-10\" width=\"200\" @click=\"click_toppings(k.name), enable_toppings_button(e)\"\n                    :disabled=\"!isDisabled\">\n\n                    <div class=\"text-center\">\n                      <h2>\n                        {{ k.name }}\n                      </h2>\n\n                      <v-card-subtitle>\n                        $ {{ k.price }}\n                        <br>\n                        Calories: {{ k.calories }}\n                      </v-card-subtitle>\n                    </div>\n                  </v-card>\n                </a>\n              </v-row>\n            </v-col>\n          </v-card>\n          <br>\n\n          <!--Subtotal, tip, and total-->\n          <center>\n            <v-card class=\"pa-2\" inlined tile width=\"1200\">\n              <v-col>\n                <h2 class=\"font-weight-bold\" @click=\"calculate_subTotal\">\n                  Subtotal: {{ sub_total.toFixed(2) }}\n                </h2>\n              </v-col>\n            </v-card>\n          </center>\n        </v-col>\n\n      </v-row>\n    </v-container>\n\n  </div>\n  <div v-else>\n    <v-container fluid>\n      <v-row align=\"center\" justify=\"center\">\n        <v-col>\n          <p class=\"text-h1\" style=\"text-align: center; padding-top: 20%\">\n            Not Signed In\n          </p>\n        </v-col>\n      </v-row>\n    </v-container>\n  </div>\n\n</template>\n<!----------Template----------->\n\n<!-----------Script------------>\n<script>\n\n// import HelloWorld from '../components/HelloWorld'\nimport { loadGoogle, userSignedIn } from '../js/login.js';\n\nimport { getItems, getLatestOrderId } from '../js/backend.js'\nimport { getLatestToppingUUID } from '../js/backend.js'\nimport { getLatestItemUUID } from '../js/backend.js'\nimport { insertOrder } from '../js/backend.js'\nimport { insertOrderItems } from '../js/backend.js'\nimport { insertOrderToppings } from '../js/backend.js'\nimport { getIdFromName } from '../js/backend.js'\nimport { incrementInventory } from '../js/backend.js'\nimport { getItemsFromCategory } from '../js/backend.js'\nimport { getToppings } from '../js/backend.js'\n\nexport default {\n  // for checkout\n\n\n\n\n\n  data: () => ({\n    signedIn: false,\n    cart_total: 0,\n    total: 0,\n    sub_total: 0,\n    show: false,\n    dialog: false,\n    dialogDelete: false,\n    count: -1,\n    enable_toppings: false,\n    enable_entrees: true,\n    enalbe_mainProteins: false,\n    enable_subProteins: false,\n    enable_delete: false,\n    tip: 0,\n\n    calories_total: 0,\n    tip1: false,\n    tip2: false,\n    tip3: false,\n    tip4: false,\n    light_mode: false,\n    dark_mode: true,\n    flag_delete: false,\n    current_time: moment(new Date()).format('YYYY-MM-DD hh:mm:ss'),\n    topping_count: 0,\n\n    subProtein_count: 0,\n\n    latestOrderID: 0,\n    latestToppingUUID: 0,\n    latestItemUUID: 0,\n\n    // Layout\n    justify: [\n      'space-between',\n    ],\n\n    // Table\n    headers: [\n      {\n        text: 'Item Number',\n        align: 'start',\n        sortable: false,\n        value: 'number',\n      },\n      { text: 'Name', value: 'name' },\n      { text: 'Price', value: 'price' },\n      { text: 'Actions', value: 'actions', sortable: false },\n    ],\n\n    items: [],\n\n    order: [],\n\n    entrees_array: [],\n\n    toppings_array: [],\n\n    editedIndex: -1,\n\n    editedItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n\n    defaultItem: {\n      number: 0,\n      name: '',\n      price: 0.0\n    },\n\n    all_items: [],\n    mainEntrees_all: [],\n    mainEntrees_name: [],\n    subEntrees_name: [],\n    subEntrees_all: [],\n    mainProteins_name: [],\n    mainProteins_all: [],\n    mainProteins_all2: [],\n    subProteins_name: [],\n    subProteins_all: [],\n    toppings_name: [],\n    toppings_all: [],\n\n  }), // data end\n\n  // computed\n  computed: {\n    calculate_subTotal() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.sub_total_track = sum;\n      return this.sub_total = sum;\n    },\n\n    isDisabled() {\n      return this.enable_toppings;\n    },\n\n    isDisabled_mainProteins() {\n      return this.enalbe_mainProteins;\n    },\n\n    isDisabled_subProteins() {\n      return this.enable_subProteins;\n    },\n\n    isDisabled_entrees() {\n      return this.enable_entrees;\n    },\n\n    isDisabled_delete() {\n      return this.enable_delete;\n    },\n\n    calculate_total() {\n      let sum = 0;\n      for (let i = 0; i < this.items.length; i++) {\n        sum += this.items[i].price;\n      }\n      this.total = (sum + this.tip).toFixed(2);\n      return (sum + this.tip).toFixed(2);\n    },\n\n    calculate_total_calories() {\n      return this.calories_total;\n    },\n  },\n\n\n\n  // watch\n  watch: {\n  },\n\n  // Clock\n  components: { VueClock },\n\n  // methods\n  methods: {\n    clickList() {\n      this.$router.push({\n        path: \"ClickList\",\n        query: { sub_total: sub_total }\n      })\n    },\n\n    move() {\n      this.$router.push({\n        path: 'checkout',\n        query: {\n          sub_total: this.sub_total,\n          toppings_array: this.toppings_array,\n          entrees_array: this.entrees_array,\n        },\n      })\n    },\n\n    calculate_cart_total() {\n      this.cart_total += this.sub_total;\n    },\n\n    // Entrees buttons\n    click_entrees(e) {\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (e === this.mainEntrees_all[i].name) {\n          this.count_update();\n          this.calories_total += this.mainEntrees_all[i].calories;\n          this.items.push({\n            number: this.count,\n            name: this.mainEntrees_all[i].name,\n            price: this.mainEntrees_all[i].price,\n          })\n        }\n      }\n      this.entrees_array.push({\n        number: this.count,\n        name: e,\n      });\n      this.order.push({\n        number: this.count,\n        name: e,\n      });\n      this.flag_delete = false;\n    },\n\n    count_update() {\n      if (this.count > -1) {\n        this.count = this.items[this.items.length - 1].number + 1;\n      }\n      else {\n        this.count += 1;\n      }\n    },\n\n    // Proteins buttons\n    click_proteins(e) {\n      if (this.flag_delete) {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.splice(this.editedIndex, 0, {\n              number: this.items[this.editedIndex - 1].number,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price,\n            })\n          }\n        }\n        this.toppings_array.push({\n          number: this.items[this.editedIndex - 1].number,\n          name: e,\n        });\n      }\n      else {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.push({\n              number: this.count,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price,\n            })\n          }\n        }\n        this.toppings_array.push({\n          number: this.count,\n          name: e,\n        });\n        this.order.push({\n          number: this.count,\n          name: e,\n        });\n      }\n      this.flag_delete = false;\n    },\n\n    click_subProteins(e) {\n      if (this.flag_delete) {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.splice(this.editedIndex, 0, {\n              number: this.items[this.editedIndex - 1].number,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price,\n            })\n          }\n        }\n        this.toppings_array.push({\n          number: this.items[this.editedIndex - 1].number,\n          name: e,\n        });\n      }\n      else {\n        for (let i = 0; i < this.mainProteins_all.length; i++) {\n          if (e === this.mainProteins_all[i].name) {\n            this.calories_total += this.mainProteins_all[i].calories;\n            this.items.push({\n              number: this.count,\n              name: this.mainProteins_all[i].name,\n              price: this.mainProteins_all[i].price,\n            })\n          }\n        }\n        this.toppings_array.push({\n          number: this.count,\n          name: e,\n        });\n        this.order.push({\n          number: this.count,\n          name: e,\n        });\n      }\n      this.flag_delete = false;\n      this.subProtein_count += 1;\n    },\n\n    // Toppings buttons\n    click_toppings(e) {\n      if (this.flag_delete) {\n        for (let i = 0; i < this.toppings_all.length; i++) {\n          if (e === this.toppings_all[i].name) {\n            this.calories_total += this.toppings_all[i].calories;\n            this.items.splice(this.editedIndex, 0, {\n              number: this.items[this.editedIndex - 1].number,\n              name: this.toppings_all[i].name,\n              price: this.toppings_all[i].price,\n            })\n          }\n        }\n        this.toppings_array.push({\n          number: this.items[this.editedIndex - 1].number,\n          name: e,\n        });\n        let count = 4;\n        count -= 1;\n        this.enable_toppings_button(count)\n      }\n      else {\n        for (let i = 0; i < this.toppings_all.length; i++) {\n          if (e === this.toppings_all[i].name) {\n            this.calories_total += this.toppings_all[i].calories;\n            this.items.push({\n              number: this.count,\n              name: this.toppings_all[i].name,\n              price: this.toppings_all[i].price,\n            })\n          }\n        }\n        this.toppings_array.push({\n          number: this.count,\n          name: e,\n        });\n        this.order.push({\n          number: this.count,\n          name: e,\n        });\n      }\n      this.flag_delete = false;\n      this.topping_count += 1;\n      this.enable_toppings_button(this.topping_count);\n    },\n\n    enable_toppings_button(e) {\n      if (this.topping_count > 3) {\n        this.enable_toppings = false;\n      }\n      else {\n        this.enable_toppings = true;\n      }\n    },\n\n    async enable_all_buttons(k) {\n      let array = await getItemsFromCategory('mainEntree');\n      for (let i = 0; i < array.length; i++) {\n        if (k === array[i].name) {\n          this.enable_toppings = true;\n          this.enalbe_mainProteins = true;\n          this.enable_subProteins = false;\n        }\n      }\n    },\n\n    enable_entree_buttons(k) {\n      this.enable_entrees = false;\n\n      if (k === 1) {\n        this.enable_entrees = true;\n      }\n    },\n\n    disable_mainProteins_buttons(k) {\n      this.enalbe_mainProteins = false;\n    },\n\n    enable_subProteins_buttons() {\n      this.enable_subProteins = true;\n    },\n\n    disable_subProteins_buttons() {\n      this.enable_subProteins = false;\n    },\n\n    addItem() {\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      this.flag_delete = false;\n      this.topping_count = 0;\n\n      // this.items.push({\n      //   number: this.count,\n      //   name: '',\n      //   price: 0,\n      // });\n    },\n\n    async deleteItem(item) {\n      this.editedIndex = this.items.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialogDelete = true\n      this.flag_delete = true\n      let mainEntrees_flag = false;\n\n      for (let d = 0; d < this.toppings_all.length; d++) {\n        if (item.name === this.toppings_all[d].name) {\n          this.topping_count -= 1;\n          this.enable_toppings_button(this.topping_count);\n        }\n      }\n\n      // check_buttons(item);\n\n      // check if item is one of the mainEntrees items\n      for (let i = 0; i < this.mainEntrees_all.length; i++) {\n        if (item.name === this.mainEntrees_all[i].name) {\n          this.count -= 1;\n          this.enable_entrees = true;\n          this.enalbe_mainProteins = false;\n          this.enable_subProteins = false;\n          this.enable_toppings = false;\n          this.flag_delete = false;\n          mainEntrees_flag = true;\n        }\n      }\n\n      // if mainEntrees item was removed, remove all proteins and toppings\n      var q = 0;\n      var r = 0;\n      var s = 0;\n\n      if (mainEntrees_flag) {\n        while (q < this.items.length) {\n          if (this.items[q].number === item.number) {\n            this.remove_calories(this.items[q].name);\n            this.remove_count(this.items[q].name);\n            this.items.splice(q, 1);\n          }\n          else {\n            ++q;\n          }\n        }\n        while (r < this.toppings_array.length) {\n          if (this.toppings_array[r].number === item.number) {\n            this.toppings_array.splice(r, 1);\n          }\n          else {\n            ++r;\n          }\n        }\n        // splice from entrees_array\n        for (let t = 0; t < this.entrees_array.length; t++) {\n          if (item.name === this.entrees_array[t].name &&\n            item.number === this.entrees_array[t].number) {\n            this.entrees_array.splice(t, 1);\n          }\n        }\n      }\n      else {\n        this.items.splice(this.editedIndex, 1)\n        this.remove_calories(item.name);\n        // splice from toppings_array\n        for (let g = 0; g < this.toppings_array.length; g++) {\n          if (item.name === this.toppings_array[g].name &&\n            item.number === this.toppings_array[g].number) {\n            this.toppings_array.splice(g, 1);\n          }\n        }\n\n        // enable mainProteins and disable subProteins buttons\n        let array = await getItemsFromCategory('mainProtein')\n        for (let j = 0; j < array.length; j++) {\n          if (item.name === array[j].name) {\n            this.enalbe_mainProteins = true;\n            this.enable_subProteins = false;\n          }\n        }\n\n        // enable subProteins button\n        for (let m = 0; m < this.subProteins_all.length; m++) {\n          if (item.name === this.subProteins_all[m].name) {\n            this.enable_subProteins = true;\n          }\n        }\n      }\n    },\n\n    remove_count(e) {\n      for (let i = 0; i < this.toppings_all.length; i++) {\n        if (e === this.toppings_all[i].name) {\n          this.topping_count -= 1;\n        }\n      }\n    },\n\n    remove_calories(e) {\n      for (let i = 0; i < this.all_items.length; i++) {\n        if (e === this.all_items[i].name) {\n          this.calories_total -= this.all_items[i].calories;\n        }\n      }\n    },\n\n    async make_all_items() {\n      this.all_items = await getItems();\n\n      let array2 = await getItemsFromCategory('mainProtein');\n      for (let p = 0; p < this.subProteins_all.length; p++) {\n        array2.push(this.subProteins_all[p]);\n      }\n      for (let o = 0; o < this.toppings_all.length; o++) {\n        array2.push(this.toppings_all[o]);\n      }\n\n      for (let u = 0; u < array2.length; u++) {\n        this.all_items.push(array2[u]);\n      }\n    },\n\n    deleteAllItem(e) {\n      if (e == 'clear') {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i)\n        }\n        this.entrees_array = [];\n        this.toppings_array = [];\n        this.count = -1;\n        this.enalbe_mainProteins = false;\n        this.enable_subProteins = false;\n        this.enable_toppings = false;\n        this.enable_entrees = true;\n        this.tip = 0;\n        this.total = 0;\n        this.sub_total = 0;\n        this.calories_total = 0;\n        this.tip1 = false;\n        this.tip2 = false;\n        this.tip3 = false;\n        this.tip4 = false;\n        this.flag_delete = false;\n        this.topping_count = 0;\n        alert(\"Cleared!\")\n      }\n      else {\n        for (let i = this.items.length; i >= 0; i--) {\n          this.items.pop(i)\n        }\n      }\n    },\n\n    getData(data) {\n      alert(data)\n    },\n\n    light_mode_button() {\n      this.$vuetify.theme.dark = false;\n      this.dark_mode = false;\n    },\n\n    light_mode_button_outlined() {\n      this.$vuetify.theme.dark = false;\n      this.light_mode = true;\n      this.dark_mode = false;\n    },\n\n    dark_mode_button() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n    },\n\n    dark_mode_button_outlined() {\n      this.$vuetify.theme.dark = true;\n      this.light_mode = false;\n      this.dark_mode = true;\n    },\n\n    async getOrderID() {\n      this.latestOrderID = await getLatestOrderId();\n    },\n\n    async getToppingUUID() {\n      this.latestToppingUUID = await getLatestToppingUUID();\n    },\n\n    async getItemUUID() {\n      this.latestItemUUID = await getLatestItemUUID();\n    },\n\n    async updateItems() {\n      let a = await getItemsFromCategory(\"mainEntree\");\n      this.mainEntrees_name.splice(0);\n      for (let i = 0; i < a.length; i++) {\n        if (a[i].name != null) {\n          this.mainEntrees_name.push(a[i].name);\n        }\n      }\n\n      let b = await getItemsFromCategory(\"subEntree\");\n      this.subEntrees_name.splice(0);\n      for (let j = 0; j < b.length; j++) {\n        if (b[j].name != null) {\n          this.subEntrees_name.push(b[j].name);\n        }\n      }\n\n      let c = await getItemsFromCategory(\"mainProtein\");\n      this.mainProteins_name.splice(0);\n      for (let n = 0; n < c.length; n++) {\n        if (c[n].name != null) {\n          this.mainProteins_name.push(c[n].name);\n        }\n      }\n\n      let d = await getItemsFromCategory(\"subProtein\");\n      this.subProteins_name.splice(0);\n      for (let m = 0; m < d.length; m++) {\n        if (d[m].name != null) {\n          this.subProteins_name.push(d[m].name);\n        }\n      }\n\n      let e = await getItemsFromCategory(\"topping\");\n      this.toppings_name.splice(0);\n      for (let u = 0; u < e.length; u++) {\n        if (e[u].name != null) {\n          this.toppings_name.push(e[u].name);\n        }\n      }\n    },\n\n    async insertOrderTable() {\n      await insertOrder(this.latestOrderID + 1, this.calories_total, this.sub_total, this.tip, this.total, this.current_time);\n\n      let c = 1;\n      if (this.entrees_array != []) {\n        for (let i = 0; i < this.entrees_array.length; i++) {\n          let id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await insertOrderItems(this.latestItemUUID + c, this.latestOrderID + 1, this.entrees_array[i].number, id_entrees, this.entrees_array[i].name);\n          let inventroy_id_entrees = await getIdFromName(this.entrees_array[i].name);\n          await incrementInventory(inventroy_id_entrees);\n          c += 1;\n        }\n      }\n\n      let d = 1;\n      if (this.toppings_array != []) {\n        for (let j = 0; j < this.toppings_array.length; j++) {\n          let id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await insertOrderToppings(this.latestToppingUUID + d, this.latestOrderID + 1, this.toppings_array[j].number, id_toppings, this.toppings_array[j].name);\n          let inventory_id_toppings = await getIdFromName(this.toppings_array[j].name);\n          await incrementInventory(inventory_id_toppings);\n          d += 1;\n        }\n      }\n      this.entrees_array = [];\n      this.toppings_array = [];\n      this.count = -1;\n      this.latestOrderID = await getLatestOrderId();\n      this.latestItemUUID = await getLatestItemUUID();\n      this.latestToppingUUID = await getLatestToppingUUID();\n      this.enalbe_mainProteins = false;\n      this.enable_subProteins = false;\n      this.enable_toppings = false;\n      this.enable_entrees = true;\n      this.tip = 0;\n      this.total = 0;\n      this.sub_total = 0;\n      this.calories_total = 0;\n      this.tip1 = false;\n      this.tip2 = false;\n      this.tip3 = false;\n      this.tip4 = false;\n      this.flag_delete = false;\n      this.topping_count = 0;\n    },\n\n    async getItemInfo() {\n      this.mainEntrees_all = await getItems();\n      this.mainProteins_all = await getItemsFromCategory('mainProtein');\n      this.subProteins_all = await getItemsFromCategory('subProtein');\n      for (let i = 0; i < this.subProteins_all.length; i++) {\n        this.mainProteins_all.push(this.subProteins_all[i]);\n      }\n      this.mainProteins_all2 = await getItemsFromCategory('mainProtein');\n      this.toppings_all = await getItemsFromCategory('topping');\n    }\n  },\n\n  async created() {\n    await this.updateItems();\n    await this.getItemInfo();\n    await this.make_all_items();\n    await loadGoogle();\n    this.signedIn = await userSignedIn(this.$route.params.credential);\n  },\n\n  async mounted() {\n    await this.getOrderID();\n    await this.getToppingUUID();\n    await this.getItemUUID();\n    await this.getIdFromName();\n  },\n\n}\n\n</script>\n<!-----------Script------------>\n\n\n<!-----------Style------------->\n<style>\n.text-center {\n  margin-top: 13px;\n}\n\n.yourOrder {\n  font-weight: bold;\n  font-size: 20px;\n  align-items: left;\n}\n\n.Entree {\n  font-weight: bold;\n  font-size: 20px;\n  align-items: left;\n}\n\n.topping {\n  font-size: 13px;\n}\n</style>\n<!-----------Style------------->\n"]},"metadata":{},"sourceType":"module"}